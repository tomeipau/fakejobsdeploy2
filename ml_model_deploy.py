# -*- coding: utf-8 -*-
"""testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oawu_JypP45ysYRo5L0H-WJCifWZsqvi
"""

import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline

# Function to load data from the uploaded CSV file
@st.cache_data
def load_data(file_path):
    return pd.read_csv(file_path)

# Upload the CSV file
uploaded_file = st.file_uploader("Please download training data from https://www.kaggle.com/datasets/shivamb/real-or-fake-fake-jobposting-prediction?resource=download&select=fake_job_postings.csv and upload CSV file", type=['csv'])

# Check if file is uploaded
if uploaded_file is not None:
    # Load data
    data = load_data(uploaded_file)

    # Extract job descriptions and labels from the data
    train_data = data['description'].astype(str).tolist()  # Assuming 'description' is the column containing job descriptions
    train_labels = data['fraudulent'].tolist()  # Assuming 'fraudulent' is the column containing labels (1 for fake, 0 for real)

    # Define the model
    rf_classifier = Pipeline([
        ('tfidf', TfidfVectorizer()),
        ('clf', RandomForestClassifier()),
    ])

    # Fit TF-IDF vectorizer and classifier with training data
    rf_classifier.fit(train_data, train_labels)

    def predict_fake_job_posting(job_description):
        # Make predictions using the loaded model
        prediction = rf_classifier.predict([job_description])
        return prediction[0]

    def main():
        st.title('Fake Job Posting Detector')

        job_description = st.text_area('Enter job description here:')
        if st.button('Predict'):
            prediction = predict_fake_job_posting(job_description)
            if prediction == 1:
                st.write('Prediction: Fake')
            else:
                st.write('Prediction: Real')

    if __name__ == '__main__':
        main()

